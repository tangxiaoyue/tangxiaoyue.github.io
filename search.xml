<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Docker 基础（9）--Dockerfile]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%20%E5%9F%BA%E7%A1%80%EF%BC%889%EF%BC%89--Dockerfile/</url>
      <content type="html"><![CDATA[<h2 id="使用Dockerfile构建nginx"><a href="#使用Dockerfile构建nginx" class="headerlink" title="使用Dockerfile构建nginx"></a>使用Dockerfile构建nginx</h2><pre><code>Dockerfile是由一行命令和语句组成的



Dockerfile构建步骤：

[root@tang /]# mkdir /dockerfile/nginx -p
我们要在nginx目录上自动化创建一个nginx镜像
</code></pre><a id="more"></a>
<pre><code>注意：D需要大写，当我们构建dockerfile的时候，docker默认会在我们当前目录读取一个名为Dockerfile的文件。这时候的D必须大写

[root@tang nginx]# cat Dockerfile 
# This Dockerfile
# My Name is TangXiaoyue
# Base image
FROM centos

# Maintainer
MAINTAINE tang 1060336375@qq.com

#Commands
RUN rpm -ivh http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm
RUN yum install -y nginx &amp;&amp; yum clean all
RUN echo &quot;daemon off;&quot; &gt;&gt;/etc/nginx/nginx.conf
ADD index.html /usr/share/nginx/html/index.html
EXPOSE 80
CMD [&quot;nginx&quot;]


#井号代表注释
#Base image  除了注释的第一行，必须是FROM，意思就是我们需要告诉dockerfile基础镜像是什么
#Maintainer 维护信息

#Commands 命令

#ADD index.html 这个文件需要我们在当前目录下有才可以，我们配置我们可以准备好，然后使用ADD命令进行添加或修改
EXPOSE 对外端口号
CMD [“nginx”] 它要启动的命令是nginx （就算是nginx服务）




我们写好dockerfile还需要一个index.html
[root@tang nginx]#  echo TangXiaoyue &gt;index.html
[root@tang nginx]# ll
total 8
-rw-r--r-- 1 root root 364 Apr  2 20:50 Dockerfile
-rw-r--r-- 1 root root  12 Apr  2 20:52 index.html

使用docker build进行构建
[root@tang ~]# docker build -t nginx_test:v1 /dockerfile/nginx/
[root@tang ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
nginx_test           v1                  bc69ee414a0f        17 seconds ago      280.7 MB


启动镜像
[root@tang ~]# docker run --name nginx_test -d -p 82:80 nginx_test:v1
7a02c27a0a04d34eec8f858e35848416b95572dbb1f485310caee5c185d2e426

[root@tang ~]# curl 127.0.0.1:82
TangXiaoyue
</code></pre><h2 id="Dockerfile参数解释"><a href="#Dockerfile参数解释" class="headerlink" title="Dockerfile参数解释"></a>Dockerfile参数解释</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><pre><code>格式：FROM&lt;image&gt;或FROM&lt;image&gt;:&lt;tag&gt;。

解释：FROM是Dockerfile里的第一条指令（必须是），后面跟有效的镜像名（如果该镜像你的本地仓库没有则会从远程仓库Pull取）。
然后后面的其它指令FROM的镜像中执行。
</code></pre><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><pre><code>格式：MAINTAINER &lt;name&gt;

    解释：指定维护者信息。
</code></pre><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><pre><code>格式：RUN &lt;command&gt;或 RUN[&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]。

    解释：运行命令，命令较长使可以使用\来换行。推荐使用上面数组的格式
</code></pre><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><pre><code>格式：
CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] 使用 exec 执行，推荐方式；
CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；
CMD [&quot;param1&quot;,&quot;param2&quot;] 提供给ENTRYPOINT的默认参数；

解释： 
CMD指定容器启动是执行的命令，每个Dockerfile只能有一条CMD命令，如果指定了多条，只有最后一条会被执行。
如果你在启动容器的时候也指定的命令，那么会覆盖Dockerfile构建的镜像里面的CMD命令。
</code></pre><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><pre><code>格式：
   ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;,&quot;param2&quot;]
   ENTRYPOINT command param1 param2（shell中执行）。

解释：和CMD类似都是配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。 

每个 Dockerfile 中只能有一个ENTRYPOINT，当指定多个时，只有最后一个起效。
ENTRYPOINT没有CMD的可替换特性，也就是你启动容器的时候增加运行的命令不会覆盖ENTRYPOINT指定的命令。 
　
所以生产实践中我们可以同时使用ENTRYPOINT和CMD， 

例如：
    ENTRYPOINT [&quot;/usr/bin/rethinkdb&quot;]
    CMD [&quot;--help&quot;]
</code></pre><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><pre><code>格式：USER daemon

    解释：指定运行容器时的用户名和UID，后续的RUN指令也会使用这里指定的用户。
</code></pre><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><pre><code>格式：EXPOSE&lt;port&gt; [&lt;port&gt;...]

解释：设置Docker容器内部暴露的端口号，如果需要外部访问，还需要启动容器时增加-p或者-P参数进行分配。
</code></pre><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><pre><code>格式：ENV&lt;key&gt; &lt;value&gt;
ENV &lt;key&gt;=&lt;value&gt; ...

    解释：设置环境变量，可以在RUN之前使用，然后RUN命令时调用，容器启动时这些环境变量都会被指定
</code></pre><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><pre><code>格式：
   ADD &lt;src&gt;... &lt;dest&gt;
   ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]

    解释：
        将指定的&lt;src&gt;复制到容器文件系统中的&lt;dest&gt; 
           所有拷贝到container中的文件和文件夹权限为0755,uid和gid为0 
        如果文件是可识别的压缩格式，则docker会帮忙解压缩
</code></pre><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><pre><code>格式：VOLUME [&quot;/data&quot;]

    解释：可以将本地文件夹或者其他container的文件夹挂载到container中。
</code></pre><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><pre><code>格式：WORKDIR/path/to/workdir

    解释：切换目录，为后续的RUN、CMD、ENTRYPOINT 指令配置工作目录。 
    可以多次切换(相当于cd命令)， 
    也可以使用多个WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如:

    WORKDIR /a
    WORKDIR b
    WORKDIR c
    RUN pwd
    则最终路径为 /a/b/c。
</code></pre><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><pre><code>ONBUILD 指定的命令在构建镜像时并不执行，而是在它的子镜像中执行
</code></pre><h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><pre><code>格式：ARG&lt;name&gt;[=&lt;default value&gt;]

    解释：ARG指定了一个变量在docker build的时候使用，
         可以使用--build-arg &lt;varname&gt;=&lt;value&gt;来指定参数的值，不过如果构建的时候不指定就会报错。
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 基础（4）--镜像管理]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%20%E5%9F%BA%E7%A1%80%EF%BC%884%EF%BC%89--%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="使用容器生成镜像"><a href="#使用容器生成镜像" class="headerlink" title="使用容器生成镜像"></a>使用容器生成镜像</h3><pre><code>[root@tang ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</code></pre>  <a id="more"></a>
<pre><code>[root@tang ~]# docker run -it -h nginx --name nginx  centos  /bin/bash

[root@nginx /]# rpm -ivh
http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm

[root@nginx /]# yum install -y nginx

[root@tang ~]# docker ps -a 
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
e46c71171306        centos              &quot;/bin/bash&quot;         2 minutes ago       Exited (0) 40 seconds ago                       nginx

[root@tang ~]# docker commit -m &quot;my nginx&quot; -a &quot;tang&quot; e46c71171306 new_nginx:v1
sha256:c15ceb0a6871e3a56e3b22d67254d09b2e03a8ae909719a6dea0daaf937940ef

    -m: 改动信息
    -a: 作者信息
    e46c71171306: 这一串为容器ID
    new_nginx:01 新镜像的名字

[root@tang ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED              SIZE
new_nginx            v1                  c15ceb0a6871        About a minute ago   355 MB
docker.io/centos     latest              98d35105a391        2 weeks ago          192.5 MB
docker.io/registry   latest              047218491f8c        4 weeks ago          33.17 MB
</code></pre><h3 id="基于本地模块创建镜像"><a href="#基于本地模块创建镜像" class="headerlink" title="基于本地模块创建镜像"></a>基于本地模块创建镜像</h3><pre><code>模版获取,直接到openva官网下载(https://openvz.org/Download/template/precreated)

[root@tang opt]# wget http://download.openvz.org/template/precreated/centos-6-x86_64-minimal.tar.gz

[root@tang opt]# cat centos-6-x86_64-minimal.tar.gz |docker import - centos6
sha256:3d2aed457a111b136bdb9178d6203cb4bb0116501f7a4847088d7593c0930a8c

[root@tang opt]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
centos6      
</code></pre><h3 id="镜像导出-导入"><a href="#镜像导出-导入" class="headerlink" title="镜像导出/导入"></a>镜像导出/导入</h3><pre><code>[root@tang opt]# docker save centos6 &gt;/opt/centos6.tar.gz   #导出

[root@tang opt]# ll
total 1539880
-rw-r--r-- 1 root root 565194752 Apr  2 16:19 centos6.tar.gz

[root@tang opt]# docker rmi centos6
Untagged: centos6:latest
Deleted: sha256:3d2aed457a111b136bdb9178d6203cb4bb0116501f7a4847088d7593c0930a8c
Deleted: sha256:dbcc6b3893af5f0b45e06f2934f73f5dc34f2e9e54fc4d50a51cc47195f19089

[root@tang opt]# docker load &lt; /opt/centos6.tar.gz              #导入
[root@tang opt]# docker load --input /opt/centos6.tar.gz        #导入

#以上两种导入方法都可以

[root@tang opt]# docker tag centos6  centos6_x86                #改名
</code></pre><h3 id="将镜像上传到dockerhub官网"><a href="#将镜像上传到dockerhub官网" class="headerlink" title="将镜像上传到dockerhub官网"></a>将镜像上传到dockerhub官网</h3><pre><code>需要提前注册dockerhub账号

1. docker hub 帐号在本地验证登陆:

[root@tang opt]# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don&apos;t have a Docker ID, head over to https://hub.docker.com to create one.
Username: tangxiaoyue
Password: 
Login Succeeded

2. docker push 镜像到docker hub 的仓库
docker push
&lt;hub-user&gt;/&lt;repo-name&gt;:&lt;tag&gt;

[root@tang ~]# docker tag centos tangxiaoyue/centos_tang:latest

[root@tang ~]# docker push tangxiaoyue/centos_tang
The push refers to a repository [docker.io/tangxiaoyue/centos_tang]
9b198ff9ff5b: Mounted from library/centos 
latest: digest: sha256:be5b4a93f116a57ab3fd454ada72421eac892a3a4925627ac9a44f65fcd69cf8 size: 529
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 基础（3）--容器登入]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%20%E5%9F%BA%E7%A1%80%EF%BC%883%EF%BC%89--%E5%AE%B9%E5%99%A8%E7%99%BB%E5%85%A5/</url>
      <content type="html"><![CDATA[<h3 id="docker-enter登入容器"><a href="#docker-enter登入容器" class="headerlink" title="docker-enter登入容器"></a>docker-enter登入容器</h3><blockquote>
<p>强烈推荐使用此种方法：简单、方便</p>
</blockquote>
<pre><code>下载.bashrc_docker，并将内容放到.bashrc中。

这个文件中定义了很多方便使用Docker的命令，比如docker-pid可以获取某个容器的 PID；
而 docker-enter 可以进入容器或直接在容器内执行命令
</code></pre><a id="more"></a>
<pre><code>[root@tang ~]# wget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker

[root@tang ~]# echo &quot;[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker&quot; &gt;&gt; ~/.bashrc; source ~/.bashrc


[root@tang ~]# docker-
docker-containerd               docker-ctr-current              docker-pid
docker-containerd-current       docker-current                  docker-storage-setup
docker-containerd-shim          docker-enter                    
docker-containerd-shim-current  docker-ip 

[root@tang ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e657e9214a57        centos              &quot;/bin/bash&quot;         24 minutes ago      Up 23 minutes                           tang

[root@tang ~]# docker-pid tang
19271

[root@tang ~]# nsenter --target 19271  --mount --uts --ipc --net --pid  #此种方法进入容器以下会讲到
[root@test /]# exit
logout

[root@tang ~]# docker-ip tang
172.18.0.2

直接使用docker-enter命令进入容器，非常方便！
[root@tang ~]# docker-enter tang
Last login: Sun Apr  2 06:38:47 UTC 2017

[root@test ~]# exit
logout

[root@tang ~]# docker ps   #退出登陆窗口后，容器还在
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e657e9214a57        centos              &quot;/bin/bash&quot;         26 minutes ago      Up 9 seconds                            tang

注意：以在容器的上下文中运行任意命令！即在宿主机上执行容器里的命令

[root@tang ~]# docker-enter tang uptime
 07:06:28 up 1 day, 22:44,  0 users,  load average: 0.00, 0.01, 0.05

注意：在宿主机上使用docker-enter命令执行容器中的命令时，最好后面加上--符号，这样容器里的所有存在的命令都可以正常执行。
[root@tang ~]# docker-enter tang -- uptime

 07:06:59 up 1 day, 22:45,  0 users,  load average: 0.00, 0.01, 0.05

[root@tang ~]# docker-enter tang -- df -h
Filesystem                                                                                         Size  Used Avail Use% Mounted on
/dev/mapper/docker-253:1-2024335-661487685eb1f6a356157463d60db20caa2c1fb3ac273de680c367e3b12dabab   10G  238M  9.8G   3% /
tmpfs                                                                                              920M     0  920M   0% /dev
tmpfs                                                                                              920M     0  920M   0% /sys/fs/cgroup
/dev/vda1                                                                                           99G  4.7G   89G   5% /etc/hosts
shm                                                                                                 64M     0   64M   0% /dev/shm

[root@tang ~]# cat /etc/redhat-release 
CentOS Linux release 7.2.1511 (Core) 

[root@tang ~]# docker-enter tang -- cat /etc/redhat-release 
CentOS Linux release 7.3.1611 (Core)
</code></pre><h3 id="nsenter登入容器"><a href="#nsenter登入容器" class="headerlink" title="nsenter登入容器"></a>nsenter登入容器</h3><pre><code>使用外部工具nsenter登陆容器，该工具和docker exec命令的效果差不多。

使用nsenter或dockerexec，都可以在容器的上下文（严格地说，是命名空间）中运行任意命令！


==nsenter安装：
[root@tang ~]#  yum install util-linux -y 


==nsenter使用：
[root@tang ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e657e9214a57        centos              &quot;/bin/bash&quot;         50 minutes ago      Up 24 minutes                           tang

[root@tang ~]# docker inspect -f &quot;{{ .State.Pid }}&quot; tang
19271

[root@tang ~]# nsenter -t 19271  -m -u -i -n -p

解释nsenter指令中进程id之后的参数的含义：

–mount参数是进去到mount namespace中 
–uts参数是进入到uts namespace中 
–ipc参数是进入到System V IPC namaspace中 
–net参数是进入到network namespace中 
–pid参数是进入到pid namespace中 
–user参数是进入到user namespace中

[root@tang ~]#  nsenter --help

Usage:
 nsenter [options] &lt;program&gt; [&lt;argument&gt;...]

Run a program with namespaces of other processes.

Options:
 -t, --target &lt;pid&gt;     target process to get namespaces from
 -m, --mount[=&lt;file&gt;]   enter mount namespace
 -u, --uts[=&lt;file&gt;]     enter UTS namespace (hostname etc)
 -i, --ipc[=&lt;file&gt;]     enter System V IPC namespace
 -n, --net[=&lt;file&gt;]     enter network namespace
 -p, --pid[=&lt;file&gt;]     enter pid namespace
 -U, --user[=&lt;file&gt;]    enter user namespace
 -S, --setuid &lt;uid&gt;     set uid in entered namespace
 -G, --setgid &lt;gid&gt;     set gid in entered namespace
     --preserve-credentials do not touch uids or gids
 -r, --root[=&lt;dir&gt;]     set the root directory
 -w, --wd[=&lt;dir&gt;]       set the working directory
 -F, --no-fork          do not fork before exec ing &lt;program&gt;
 -Z, --follow-context   set SELinux context according to --target PID
 -h, --help     display this help and exit
 -V, --version  output version information and exit

我们进入容器中查看进程 
以下是以nsenter启动的进程
[root@test /]# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0  11768  1684 ?        Ss+  07:03   0:00 /bin/bash
root        77  0.0  0.1  15200  1988 ?        S    07:31   0:00 -bash
root        90  0.0  0.0  50872  1816 ?        R+   07:31   0:00 ps aux

/bin/bash是我们运行容器产生的进程
-bash 是我们使用nsenter产生的，这样如果我们退出容器，容器就不会退出，因为-bash还在运行

[root@test /]# exit
logout

[root@tang ~]# docker ps 
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e657e9214a57        centos              &quot;/bin/bash&quot;         55 minutes ago      Up 29 minutes                           tang

因为每次进入容器都需要输入那两条命令，所以我们可以写一个脚本来获取。 

==脚本内容如下：
[root@tang opt]# cat docker_in.sh 
#!/bin/bash
# Use nsenter to access docker
docker_in(){
  NAME_ID=$1
  PID=$(docker inspect -f &quot;{{ .State.Pid }}&quot; $NAME_ID)
  nsenter -t $PID -m -u -i -n -p
}
docker_in $1

[root@tang opt]# chmod +x docker_in.sh 
[root@tang opt]# ./docker_in.sh tang
[root@test /]# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 07:03 ?        00:00:00 /bin/bash
root        91     0  0 07:34 ?        00:00:00 -bash
root       104    91  0 07:34 ?        00:00:00 ps -ef
[root@test /]# exit
logout
[root@tang opt]# docker exec tang ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 07:03 ?        00:00:00 /bin/bash
root       105     0  0 07:35 ?        00:00:00 ps -ef


我们还可以使用exec进入docker容器中

[root@tang opt]# docker exec -it tang /bin/bash
</code></pre><h3 id="start-ai登入容器"><a href="#start-ai登入容器" class="headerlink" title="start -ai登入容器"></a>start -ai登入容器</h3><pre><code>对于一个已关闭的容器的登陆，可以使用&quot;docker start -ai container&quot;登陆。这种其实就是先启动容器，然后再进入容器内。

[root@tang ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
e657e9214a57        centos              &quot;/bin/bash&quot;         About an hour ago   Exited (0) 53 seconds ago                       tang

[root@tang ~]# docker start -ai tang   #-a -i 都可以
[root@test /]# exit
exit
[root@tang ~]# docker start -i tang
[root@tang ~]# docker start -a tang
</code></pre><h3 id="docker-exec登入容器"><a href="#docker-exec登入容器" class="headerlink" title="docker exec登入容器"></a>docker exec登入容器</h3><pre><code>使用自带命令docker exec登陆容器

命令格式：docker exec -ti container_id /bin/bash

[root@tang ~]# docker ps    #前提是容器已经启动
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e657e9214a57        centos              &quot;/bin/bash&quot;         About an hour ago   Up 2 minutes                            tang
[root@tang ~]# docker exec -it tang /bin/bash
[root@test /]# exit
</code></pre><h3 id="docker-attach登入容器"><a href="#docker-attach登入容器" class="headerlink" title="docker attach登入容器"></a>docker attach登入容器</h3><pre><code>使用自带命令docker attach登陆容器。

命令格式：docker attach container_id

[root@tang ~]# docker ps   #前提容器已经启动了
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e657e9214a57        centos              &quot;/bin/bash&quot;         About an hour ago   Up 5 minutes                            tang
[root@tang ~]# docker attach tang
[root@test /]# exit
</code></pre><h3 id="ssh登入容器"><a href="#ssh登入容器" class="headerlink" title="ssh登入容器"></a>ssh登入容器</h3><pre><code>使用ssh登陆容器。这种方法需要在容器中启动sshd，存在开销和攻击面增大的问题。同时也违反了Docker所倡导的一个容器一个进程的原则

ssh登入会专门写一篇文章介绍。这里就不叙述了
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 基础（7）--数据管理]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%20%E5%9F%BA%E7%A1%80%EF%BC%887%EF%BC%89--%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="挂载本地目录到容器里"><a href="#挂载本地目录到容器里" class="headerlink" title="挂载本地目录到容器里"></a>挂载本地目录到容器里</h4><pre><code>[root@tang /]# mkdir /data/docker -p
root@tang docker]# mkdir docker_01
[root@tang docker]# docker run -it -h docker_01 --name docker_01 -v /data/docker/docker_01/:/docker_01 centos bash
[root@docker_01 /]# cd /docker_01/        
[root@docker_01 docker_01]# touch docker_01.txt
</code></pre><a id="more"></a>
<pre><code>[root@docker_01 docker_01]# exit
exit
[root@tang docker]# cd /data/docker/docker_01/
[root@tang docker_01]# ll
total 0
-rw-r--r-- 1 root root 0 Apr  3 08:03 docker_01.txt

[root@tang docker_01]# cd ..
[root@tang docker]# mkdir docker_02
[root@tang docker]# docker run -it -h docker_02 --name docker_02 -v /data/docker/docker_02/:/docker_02 centos bash
[root@docker_02 /]# cd /docker_02/
[root@docker_02 docker_02]# mkdir docker_02.txt
[root@docker_02 docker_02]# exit
exit
[root@tang docker]# cd docker_02/
[root@tang docker_02]# ll
total 4
drwxr-xr-x 2 root root 4096 Apr  3 08:05 docker_02.txt

提示：    
      -v: 指定挂载目录
      : : 前面的为本地目录
      : : 后面到为容器里的目录
      即使将删除这个容器,文件也不会丢失.
</code></pre><h4 id="挂载数据卷-多个容器挂载宿主机的同一个目录"><a href="#挂载数据卷-多个容器挂载宿主机的同一个目录" class="headerlink" title="挂载数据卷(多个容器挂载宿主机的同一个目录)"></a>挂载数据卷(多个容器挂载宿主机的同一个目录)</h4><pre><code>[root@tang data]# docker run -it -h docker_03 --name docker_03
--volumes-from docker_01 centos bash
[root@docker_03 /]# cd /docker_01/
[root@docker_03 docker_01]# ll
total 0
-rw-r--r-- 1 root root 0 Apr  3 00:03 docker_01.txt
[root@docker_03 docker_01]# df -h|grep docker_01
/dev/vda1                           99G  5.4G   88G   6% /docker_01
[root@docker_03 docker_01]# echo &quot;This is Doceker_3&quot; &gt; /docker_01/3.txt
[root@docker_03 docker_01]# ll
total 4
-rw-r--r-- 1 root root 18 Apr  3 00:26 3.txt
-rw-r--r-- 1 root root  0 Apr  3 00:03 docker_01.txt
[root@tang ~]# docker start docker_01
docker_01
[root@tang ~]# docker-enter docker_01
[root@docker_01 ~]# cd /docker_01/
[root@docker_01 docker_01]# ll
total 4
-rw-r--r-- 1 root root 18 Apr  3 00:26 3.txt
-rw-r--r-- 1 root root  0 Apr  3 00:03 docker_01.txt
</code></pre><h4 id="自定义数据卷容器"><a href="#自定义数据卷容器" class="headerlink" title="自定义数据卷容器"></a>自定义数据卷容器</h4><pre><code>[root@tang ~]# docker run -itd -h node --name node -v /data centos bash
056ac10e28855c3d29a94fe552711e6a712a5670e6e9c43c4b79270cbc6b0a0f
                #这里的/data是容器node的/data目录,而不是宿主机的/data目录

[root@tang ~]# docker-enter node
[root@node ~]#  touch /data/1 /data/2 /data/3
[root@node ~]# cd /data/
[root@node data]# ll
total 0
-rw-r--r-- 1 root root 0 Apr  3 01:00 1
-rw-r--r-- 1 root root 0 Apr  3 01:00 2
-rw-r--r-- 1 root root 0 Apr  3 01:00 3
[root@node data]# exit
logout
[root@tang ~]# docker run -itd -h node1 --name node1 --volumes-from node centos bash
2965a8f1184a7a1cbd26ef07e4b3d201fa17e5b68a52c619d6292da75c85d117
[root@tang ~]# docker-enter node1
[root@node1 ~]# cd /data/
[root@node1 data]# ll
total 0
-rw-r--r-- 1 root root 0 Apr  3 01:00 1
-rw-r--r-- 1 root root 0 Apr  3 01:00 2
-rw-r--r-- 1 root root 0 Apr  3 01:00 3
[root@node1 data]# touch 4
[root@node data]# ll
total 0
-rw-r--r-- 1 root root 0 Apr  3 01:00 1
-rw-r--r-- 1 root root 0 Apr  3 01:00 2
-rw-r--r-- 1 root root 0 Apr  3 01:00 3
-rw-r--r-- 1 root root 0 Apr  3 01:02 4
</code></pre><h4 id="数据卷的备份"><a href="#数据卷的备份" class="headerlink" title="数据卷的备份"></a>数据卷的备份</h4><pre><code>[root@docker ~]# mkdir /docker_data_backup
[root@docker ~]# docker run -itd -h tang --name tang -v /docker_data_backup/:/backup centos bash
250da7a47222e52c5a5d387ff8ce816a72b221ffb8d481739c4c68073507fe
[root@docker ~]# docker-enter tang
[root@tang ~]# mkdir /data
[root@tang ~]# touch /data/{1,2,3,4}
[root@tang ~]# tar cvf /backup/data.tar /data/
[root@tang ~]# cd /backup/
[root@tang backup]# ll
total 12
-rw-r--r-- 1 root root 10240 Apr  3 01:30 data.tar
[root@tang backup]# exit
logout
[root@docker ~]# cd /docker_data_backup/
[root@docker docker_data_backup]# ll
total 12
-rw-r--r-- 1 root root 10240 Apr  3 09:30 data.tar
</code></pre><h4 id="数据卷的恢复"><a href="#数据卷的恢复" class="headerlink" title="数据卷的恢复"></a>数据卷的恢复</h4><pre><code>[root@docker ~]# mkdir /docker_data_backup
[root@docker ~]# docker run -itd -h tang --name tang -v /docker_data_backup/:/backup centos bash
3728f6b0a6e5b47f904de0474db7d4479f33e87740906e1539eca385c3fab04d
[root@docker ~]# docker-enter tang
[root@tang ~]# mkdir /tools/
[root@tang ~]# touch /tools/{1,2,3,4}
[root@tang ~]# tar zcvf /backup/tools.tar /tools/
/tools/
/tools/1
/tools/2
/tools/3
/tools/4
[root@tang ~]# ll /backup/
total 4
-rw-r--r-- 1 root root 162 Apr  3 02:08 tools.tar
[root@tang ~]# exit
logout

[root@docker ~]# docker run -itd -h tang1 --name tang1 -v /tang1 centos bash
7ec371bb67f136234878771c227c4245a0ccf6c986e8c94a412d6c4111852a2b
[root@docker ~]# docker run -itd -h tang2 --name tang2 --volumes-from tang1 -v /docker_data_backup/:/backup centos bash
53e4cea1c45f3c081a6dd95b935f906aa037e6ed2170b6249a913ccd6fb4c119
[root@docker ~]# docker-enter tang2
[root@tang2 ~]# ll /backup/
total 4
-rw-r--r-- 1 root root 162 Apr  3 02:08 tools.tar
[root@tang2 tang1]# tar xvf /backup/tools.tar -C /tang1
[root@tang2 tang1]# exit
logout
[root@docker ~]# docker-enter tang1
[root@tang1 ~]# cd /tang1/
[root@tang1 tang1]# ll
total 4
drwxr-xr-x 2 root root 4096 Apr  3 02:07 tools
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 基础（8）--网络管理]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%20%E5%9F%BA%E7%A1%80%EF%BC%888%EF%BC%89--%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="Docker四种网络模式"><a href="#Docker四种网络模式" class="headerlink" title="Docker四种网络模式"></a>Docker四种网络模式</h3><h4 id="第一种网络模式host"><a href="#第一种网络模式host" class="headerlink" title="第一种网络模式host"></a>第一种网络模式host</h4><pre><code>host模式: 使用--net=host指定docker使用的网络实际上和宿主机一样,在容器内看到的网卡ip是宿主机上的ip.
</code></pre><a id="more"></a>
<pre><code>[root@docker ~]# docker run -itd -h node1 --name node1 --net=host centos bash
406cdb306f3c350b6f5344048ae25426f1df3f6863162c0b3a91e3dcd48eba
[root@docker ~]# ifconfig |awk -F &apos; &apos;  &apos;NR==10{print$2}&apos;
172.17.82.185
[root@docker ~]# docker-enter node1    #进去之后修改主机名，因为主机名个宿主机一样，貌似-h也指定不了主机名
[root@node1 ~]# yum install -y net-tools
[root@node1 ~]# ifconfig |awk -F &apos; &apos;  &apos;NR==10{print$2}&apos;
172.17.82.185
</code></pre><h4 id="第二种网络模式container"><a href="#第二种网络模式container" class="headerlink" title="第二种网络模式container"></a>第二种网络模式container</h4><pre><code>container模式: 使用--net=container:container_id/container_name多个容器使用共同的网络,看到的ip是一样的.


[root@docker ~]# docker run -itd -h node2 --name node2  --net=container:node1 centos bash     #此处不能指定主机名创建，否则失败
/usr/bin/docker-current: Error response from daemon: Conflicting options: hostname and the network mode.
See &apos;/usr/bin/docker-current run --help&apos;
[root@docker ~]# docker run -itd  --name node2 --net=container:node1 centos bash
0fc16c4a055cf0035c1241ba6cce6c5ad0c711f2ef13e0589c3254f19a96b271
[root@docker ~]# docker-enter node2
[root@node2 ~]# yum install -y net-tools
[root@node2 ~]# ifconfig |awk -F &apos; &apos;  &apos;NR==10{print$2}&apos;    #和node1的ip一样，也和宿主机的ip一样（node1使用的是--net=host模式）
172.17.82.185
</code></pre><h4 id="第三种网络模式none"><a href="#第三种网络模式none" class="headerlink" title="第三种网络模式none"></a>第三种网络模式none</h4><pre><code>none模式: 使用--net=none, 这种模式下,不会配置任何网络

[root@docker ~]# docker run -itd -h node3 --name node3 --net=none centos
c1f4bd859566f11517248718a94456066d16ad66748a2c78743881e450d4ca09
[root@docker ~]# docker-enter node3
[root@node3 ~]# ping www.baidu.com
ping: www.baidu.com: Name or service not known
</code></pre><h4 id="第四种网络模式bridge"><a href="#第四种网络模式bridge" class="headerlink" title="第四种网络模式bridge"></a>第四种网络模式bridge</h4><pre><code>bridge模式: 使用--net=bridge.创建完容器默认为这种网络模式.类似与vmware的nat网络模式.

[root@docker ~]# docker run -itd -h node4 --name node4 --net=bridge centos bash
fc4f817e741f22615d0cdbab6608877d268ea15be6ba790cae5706d03871ac41
</code></pre><h3 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h3><pre><code>[root@docker ~]# docker run -itd -h node1 --name node1 centos bash
27df97f0e77e745660ee7b9c8b318c64f63e6aa632db3d3b0c44c4e0f4006124
[root@docker ~]# docker-enter node1
[root@node1 ~]# rpm -ivh http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm
[root@node1 ~]# yum install -y nginx
[root@docker ~]# docker commit -m &quot;nginx&quot; -a &quot;tang&quot; 27df97f0e77e nginx:v1
    #此处仅容器做为镜像，主要是减少以后重复性的工作，不需要新建一个容器在部署nginx

[root@docker ~]# docker run -itd -h nginx --name nginx -p 81:80 nginx:v1 bash      #-p 端口映射，射到宿主机81端口上
a5dd375e829d05734a935d5f41723841568b543822a64a4ec277480f5f552e41
[root@docker ~]# docker-enter nginx
Last login: Mon Apr  3 07:00:51 UTC 2017
[root@nginx ~]# /usr/sbin/nginx 
[root@nginx ~]# echo &quot;TangXiaoyue&quot; &gt; /usr/share/nginx/html/1.html
[root@nginx ~]# curl 127.0.0.1/1.html
TangXiaoyue
[root@nginx ~]# exit
logout
[root@docker ~]#  curl 127.0.0.1:81/1.html
TangXiaoyue
</code></pre><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><pre><code>1.安装mysql
[root@docker ~]# docker run --privileged -itd -h node1 --name node1 centos /sbin/init
fd547b535ff3af19bf36b219f542864962d60480a8d56836db30c20f079ec43f
[root@docker ~]# docker-enter node1
[root@node1 ~]# yum install -y wget
[root@node1 ~]# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm
[root@node1 ~]# rpm -ivh mysql-community-release-el7-5.noarch.rpm
[root@node1 ~]# yum install mysql-community-server
[root@node1 ~]# systemctl start mysql.service
[root@node1 ~]# mysql -uroot
&gt;set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;123456&apos;);

2.制作mysql镜像
[root@docker ~]# docker commit -m &quot;mysql&quot; -a &quot;tang&quot; fd547b535ff3 mysql:v1
sha256:21af416e70b0302163e4aa279118afdd96a0c8590487268a3d26920caf6c5d1a
[root@docker ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
mysql                v1                  21af416e70b0        4 seconds ago       797.3 MB


[root@docker ~]# docker run --privileged -itd -h mysql --name mysql mysql:v1 /sbin/init
8d71a34516a2c05a7ea63fde5773785360d1301509d687797eec5ead62a01d55


3.以mysql、nginx镜像分别创建两个容器并端口映射
[root@docker ~]# docker run -itd -h nginx --name nginx -p 10080:80 --link mysql:db nginx:v1 bash
8aea6116f67c9760b8f4d3de08251b28af839b9e2195860ad4b24d54833c286a
[root@docker ~]# docker-enter nginx
Last login: Mon Apr  3 07:00:51 UTC 2017
[root@nginx ~]# yum install -y telnet
[root@nginx ~]# telnet db 3306
Trying 172.18.0.3...
Connected to db.
Escape character is &apos;^]&apos;.
CHost &apos;172.18.0.4&apos; is not allowed to connect to this MySQL serverConnection closed by foreign host.
[root@nginx ~]# cat /etc/hosts
172.18.0.3    db mysql mysql
172.18.0.4    nginx
</code></pre><h3 id="配置网桥-centos7"><a href="#配置网桥-centos7" class="headerlink" title="配置网桥(centos7)"></a>配置网桥(centos7)</h3>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 基础（5）--容器管理]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%20%E5%9F%BA%E7%A1%80%EF%BC%885%EF%BC%89--%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="查看启动的容器"><a href="#查看启动的容器" class="headerlink" title="查看启动的容器"></a>查看启动的容器</h4><pre><code>[root@tang ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
2f8c14f16e03        centos              &quot;/bin/bash&quot;         5 minutes ago       Up 2 minutes                            tang
</code></pre>  <a id="more"></a>
<h4 id="查看所有的容器-包括启动、停止"><a href="#查看所有的容器-包括启动、停止" class="headerlink" title="查看所有的容器(包括启动、停止)"></a>查看所有的容器(包括启动、停止)</h4><pre><code>[root@tang ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
e5d7ccb9522c        centos              &quot;/bin/bash&quot;         15 seconds ago      Exited (0) 12 seconds ago                       tang1
2f8c14f16e03        centos              &quot;/bin/bash&quot;         3 minutes ago       Up 1 seconds                                    tang

Exited:表示该容器已经退出。没有启动
</code></pre><h4 id="创建容器-create、run-、进入容器"><a href="#创建容器-create、run-、进入容器" class="headerlink" title="创建容器(create、run)、进入容器"></a>创建容器(create、run)、进入容器</h4><pre><code>[root@tang ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
docker.io/centos     latest              98d35105a391        2 weeks ago         192.5 MB
docker.io/registry   latest              047218491f8c        4 weeks ago         33.17 MB

[root@tang ~]# docker create -it --name tang_create centos /bin/bash                     #使用create创建容器
3b316839ea357a3fe47fcae3488d6f491882ecb8c954412c502cbd6dcf9e2478

[root@tang ~]# docker run -it --name tang_run centos /bin/bash                          #使用run创建容器
[root@b5dbba42703a /]# exit
exit
</code></pre><h4 id="启动停止容器"><a href="#启动停止容器" class="headerlink" title="启动停止容器"></a>启动停止容器</h4><pre><code>[root@tang ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

[root@tang ~]# docker start tang_run                #start启动容器
tang_run

[root@tang ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
b5dbba42703a        centos              &quot;/bin/bash&quot;         4 minutes ago       Up 14 seconds                           tang_run

[root@tang ~]# docker stop tang_run                 #stop停止容器
tang_run
[root@tang ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</code></pre><h4 id="创建容器-指定容器名"><a href="#创建容器-指定容器名" class="headerlink" title="创建容器,指定容器名"></a>创建容器,指定容器名</h4><pre><code>[root@tang ~]# docker run -itd -h tang_run --name tang centos /bin/bash
8afe717f82718214056a61e3881552338d5c911d272a80342edec063b5048
        -d: 容器退出后不关闭容器.
        -h:指定主机名
</code></pre><h4 id="删除容器-镜像"><a href="#删除容器-镜像" class="headerlink" title="删除容器/镜像"></a>删除容器/镜像</h4><pre><code>[root@tang ~]# docker rm tang                               #删除容器
[root@tang ~]# docker rm -f tang                            #强制删除容器，不管是否在运行
[root@tang ~]# docker rm $(docker ps -a -q)                 #删除所有容器
</code></pre><h4 id="导出容器-可迁移到其它机器-导入容器"><a href="#导出容器-可迁移到其它机器-导入容器" class="headerlink" title="导出容器(可迁移到其它机器)/导入容器"></a>导出容器(可迁移到其它机器)/导入容器</h4><pre><code>[root@tang ~]# docker export tang &gt;/opt/tang.tar            #导出容器
[root@tang ~]# docker rm tang
tang
[root@tang ~]# cat /opt/tang.tar |docker import - tang      #恢复的只是一个镜像，需要通过镜像创建容器
[root@tang ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
tang                 latest              393d449b1ed4        44 seconds ago      192.5 MB


提示：如果在之前那个容器内创建的文件，导出，导入之后容器内的文件是不变的
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 基础（6）--仓库管理]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%20%E5%9F%BA%E7%A1%80%EF%BC%886%EF%BC%89--%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Docker的仓库是DockerHub，类似于github，github有一个开源的软件叫gitlab。Docker也有一个开源软件docker registry</p>
</blockquote>
<a id="more"></a>
<pre><code>[root@tang ~]# docker pull registry

[root@tang ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
docker.io/centos     latest              98d35105a391        2 weeks ago         192.5 MB
docker.io/registry   latest              047218491f8c        4 weeks ago         33.17 MB

默认占用5000端口，我们查看是否存在5000端口
[root@tang ~]# netstat -lntup | grep 5000

运行容器
[root@tang ~]# docker run -d -p 5000:5000 registry
f002089ab95474290853a2a24b86cb0adbb5848c4a468175304b59b27d6e3b0e

提示：docker比较老的版本运行起来就可以运行，1.7之后都不可以
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 基础（2）--命令]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89--%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="安装下载"><a href="#安装下载" class="headerlink" title="安装下载"></a>安装下载</h3><pre><code>yum install -y docker                                    #下载
systemctl start docker                                    #启动
systemctl enable docker                                    #自启动
</code></pre><a id="more"></a>
<h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><pre><code>docker search  images                                    #搜索镜像
docker pull images                                    #下载镜像
docker    images                                    #查看镜像
docker tag centos6  centos6_x86                                    #镜像改名
docker save image&gt;/opt/images.tar.gz                                    #导出镜像
docker load&lt;/opt/images.tar.gz                                    #导入镜像
docker load --input /opt/images.tar.gz                                            #导入镜像
docker rmi images_id                                                            #删除镜像
docker rmi $(docker images -q)                                                    #删除所有镜像
</code></pre><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><pre><code>docker ps -a                                                                    #查看容器
docker run centos /bin/echo &quot;hehe&quot;                                                #首次创建一个容器
docekr run -h tang --name tang -t -i centos /bin/bah                            #创建一个以tang为名的容器；
                                                                                    --name：指定容器名    
                                                                                    -t：分配一个tty终端    
                                                                                    -i：容器的标准输出保持打开状态 
                                                                                    -h:指定主机名
docker create -it --name centos1 centos                                            #使用create创建容器
docekr stop ID（name）                                                            #停止容器
docker start ID（name）                                                            #启动容器
docker attach ID（name）                                                            #进入容器
docker exec -it ID(name)  /bin/bash
docker rm  ID（name）                                                            #删除容器    
                                                                                    -f：强制删除容器，包括在运行的
                                                                                #exec和attach总结: 
                                                                                    attach登陆容器后,退出时容器会关闭. 
                                                                                    推荐使用exec进入容器
docker rm $(docker ps -a -q)                                                    #删除所有容器
</code></pre><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><pre><code>docker run --name nginx -d -P nginx                                                #随机映射 
docker run --name nginx -d -p 81:80 nginx                                         #指定映射
docker run -it --name nginx -p 80:80 nginx /bin/bash                            #指定映射
</code></pre><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><pre><code>docker logs ID（name）                                                            #查看日志
</code></pre><h3 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h3><pre><code>docker run -it --name tang -v /data centos                                         #默认挂载目录
docekr inspect ID(name)                                                            #查看容器信息
                                                                                    ==查看mounts模块
docekr run -it --name tang -v /data:/data centos                                   #指定挂载目录
docker run -it --name tang -v /data:/data:rw centos                                 #指定权限挂载
                                                                                    ==rw：读写
docker run -it --name tang -v /data:/data:ro centos                             #指定权限挂载
                                                                                ==ro：只读
docker run -it --name tang  ~/.bash_history:/.bash_history centos                #记录历史记录
</code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><pre><code>docker run -d --name nfs -v /data:/data centos                                     #启动nfs容器，挂在一个卷，
                                            -d：直接在后台执行
docker run -it --name test1 --volumes-from nfs centos                            #启动test1容器，挂载到nfs的数据卷容器上
docker run -it --name test2 --volumes-from nfs centos                             #启动test2容器，挂载到nfs的数据卷容器上
                                        #test1和test2的/data数据可以共享
</code></pre><h3 id="手动制作镜像"><a href="#手动制作镜像" class="headerlink" title="手动制作镜像"></a>手动制作镜像</h3><pre><code>docker run -it --name mynginx centos                                            #基础centos进行创建容器mynginx
</code></pre><h2 id="在mynginx容器内安装nginx"><a href="#在mynginx容器内安装nginx" class="headerlink" title="在mynginx容器内安装nginx"></a>在mynginx容器内安装nginx</h2><pre><code>rpm -ivh http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm
yum install -y nginx
docker commit -m &quot;my nginx&quot; f9c7dfb6f552 tang/mynginx:v1                        #提交镜像，
                                            ==同时打一个标签叫mynginx:v1
                                            ==tang相当于你向github上提交的用户名
docker run -it --anme nginxv1 tang/mynginx:v1                                    #基于镜像tang/mynginx:v1创建容器nginxv1
```
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker问题梳理--持续更新]]></title>
      <url>http://yoursite.com/2017/03/11/Docker%E9%97%AE%E9%A2%98%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="关于systemctl无法启动服务的问题处理"><a href="#关于systemctl无法启动服务的问题处理" class="headerlink" title="关于systemctl无法启动服务的问题处理"></a>关于systemctl无法启动服务的问题处理</h3><pre><code>问题：

使用systemctl启动服务的时候出现以下异常：

Failed to get D-Bus connection: Operation not permitted 


解决：

docker run --privileged -itd -h node1 --name node1 centos /sbin/init
</code></pre>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法大全]]></title>
      <url>http://yoursite.com/2017/03/11/Markdown%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p><strong>题记：随着Markdown语言的热度不断提升，越来越多的人喜欢使用Markdown这种简洁、便宜的语言来编辑自己的blog、文章。下面笔者就一些简单常用的Markdown语句进行介绍，希望对大家在进行Markdown语言编辑自己的文章时有所帮助。</strong></p>
<a id="more"></a>
<h2 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1.斜体和粗体"></a>1.斜体和粗体</h2><blockquote>
<p>代码：</p>
</blockquote>
<pre><code>1. *斜体*或_斜体_
2. **粗体**
3. ***加粗斜体***
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<ul>
<li><em>这是一段斜体</em>   </li>
<li><strong>这是一段粗体</strong>   </li>
<li><strong><em>这是一段加粗斜体</em></strong>   </li>
</ul>
<h2 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2.分级标题"></a>2.分级标题</h2><blockquote>
<p>第一种写法： </p>
</blockquote>
<pre><code>1.这是一个一级标题   
2.================
3.   
4. 这是一个一级标题   
5. --------------------------
</code></pre><blockquote>
<p>第二种写法：</p>
</blockquote>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
</code></pre><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3.超链接"></a>3.超链接</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><blockquote>
<p>代码：</p>
</blockquote>
<pre><code>1.欢迎来到[梵居闹市](http:// blog.leanote.com/freewalk)     
2.  
3.欢迎来到[梵居闹市](http:// blog.leanote.com/freewalk &quot;梵居闹市&quot;)   
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<p>欢迎来到<a href="http://blog.leanote.com/freewalk" target="_blank" rel="external">梵居闹市</a><br>欢迎来到<a href="http://blog.leanote.com/freewalk" title="梵居闹市" target="_blank" rel="external">梵居闹市</a></p>
<h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><blockquote>
<p>代码：   </p>
</blockquote>
<pre><code>我经常去的几个网站[Google][1]、[Leanote][2]以及[自己的博客][3]    
[Leanote 笔记][2]是一个不错的[网站][]。     
[1]: http://www. google.com &quot;Google&quot;  
[2]:http://www. leanote.com &quot;Leanote&quot;
[3]:http://http:/ /blog.leanote.com/freewalk &quot;梵居闹市&quot;       
[网站]:http: //http://blog.leanote.com/freewalk
</code></pre><blockquote>
<p>显示效果：    </p>
</blockquote>
<p>我经常去的几个网站<a href="Markdown是一种纯文本标记语言">Google</a>、<a href="http://www.leanote.com" title="Leanote" target="_blank" rel="external">Leanote</a>以及<a href="http://http://blog.leanote.com/freewalk" title="梵居闹市" target="_blank" rel="external">自己的博客</a><br><a href="http://www.leanote.com" title="Leanote" target="_blank" rel="external">Leanote 笔记</a>是一个不错的<a href="http://http://blog.leanote.com/freewalk" target="_blank" rel="external">网站</a>。</p>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><blockquote>
<p>代码： </p>
</blockquote>
<pre><code>&lt;http://example.com/&gt;   
&lt;address@example.com&gt;
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<p><a href="http://example.com/" target="_blank" rel="external">http://example.com/</a><br><a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#97;&#100;&#100;&#114;&#101;&#x73;&#115;&#x40;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;">&#97;&#100;&#100;&#114;&#101;&#x73;&#115;&#x40;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;</a></p>
<h2 id="4-锚点"><a href="#4-锚点" class="headerlink" title="4.锚点"></a>4.锚点</h2><blockquote>
<p>代码：  </p>
</blockquote>
<pre><code>跳转到[目录](#index)
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<p>跳转到<a href="#index">目录</a></p>
<h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li><p>使用 *，+，- 表示无序列表。</p>
<blockquote>
<p>代码：  </p>
</blockquote>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三<blockquote>
<p>显示效果：</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><blockquote>
<p>代码：</p>
</blockquote>
<pre><code>1. 有序列表项 一
2. 有序列表项 二
3. 有序列表项 三
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="列表缩进"><a href="#列表缩进" class="headerlink" title="列表缩进"></a>列表缩进</h3><blockquote>
<p>代码：</p>
</blockquote>
<pre><code>*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。
那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 
软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 
*   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 
寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 
但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 
悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<ul>
<li>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ </li>
<li>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<br>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩</li>
</ul>
<h3 id="包含段落的列表"><a href="#包含段落的列表" class="headerlink" title="包含段落的列表"></a>包含段落的列表</h3><blockquote>
<p>代码：</p>
</blockquote>
<pre><code>*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。
那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 
软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！

     那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 
寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 
但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！


*    悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<ul>
<li><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</p>
<p> 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ </p>
</li>
<li>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</li>
</ul>
<h3 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h3><blockquote>
<p>代码：</p>
</blockquote>
<pre><code>*  阅读的方法:（一个空格）
    &gt; 打开书本。
    &gt; 打开电灯。
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<ul>
<li>阅读的方法:<blockquote>
<p>打开书本。<br>打开电灯。</p>
</blockquote>
</li>
</ul>
<h3 id="包含代码区块的引用"><a href="#包含代码区块的引用" class="headerlink" title="包含代码区块的引用"></a>包含代码区块的引用</h3><p><strong>语法说明：</strong><br>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：   </p>
<ul>
<li><p>一列表项包含一个列表区块： </p>
<pre><code>&lt;代码写在这&gt;
</code></pre></li>
</ul>
<h3 id="一个特殊情况"><a href="#一个特殊情况" class="headerlink" title="一个特殊情况"></a>一个特殊情况</h3><p>在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：     </p>
<pre><code>1986. What a great season.
</code></pre><p>会显示成：     </p>
<ol>
<li>What a great season.</li>
</ol>
<p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：      </p>
<pre><code>1986\. What a great season.
</code></pre><p>会显示成：<br>1986. What a great season.</p>
<h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h2><ul>
<li><p>代码：</p>
<pre><code>&gt; 这是一个有两段文字的引用,
&gt; 无意义的占行文字1.
&gt; 无意义的占行文字2.
&gt; 
&gt; 无意义的占行文字3.
&gt; 无意义的占行文字4
</code></pre></li>
<li>显示效果：  </li>
</ul>
<blockquote>
<p>这是一个有两段文字的引用,<br>无意义的占行文字1.<br>无意义的占行文字2.     </p>
<p>无意义的占行文字3.<br>无意义的占行文字4.     </p>
</blockquote>
<h3 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h3><ul>
<li><p>代码：</p>
<pre><code>&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白

&gt;&gt; 自己看教程！ - 愤青

&gt; 教程在哪？ - 小白
</code></pre></li>
<li>显示效果：</li>
</ul>
<blockquote>
<blockquote>
<blockquote>
<p>请问 Markdwon 怎么用？ - 小白</p>
</blockquote>
<p>自己看教程！ - 愤青</p>
</blockquote>
<p>教程在哪？ - 小白</p>
</blockquote>
<h3 id="引用其它要素"><a href="#引用其它要素" class="headerlink" title="引用其它要素"></a>引用其它要素</h3><ul>
<li><p>代码：</p>
<pre><code>&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre></li>
<li>显示效果：</li>
</ul>
<blockquote>
<ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre></blockquote>
<h2 id="7-插入图像"><a href="#7-插入图像" class="headerlink" title="7. 插入图像"></a>7. 插入图像</h2><h3 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h3><ul>
<li><p>代码： </p>
<pre><code>高圆圆： 
![高圆圆](ht tp://pic2016.5442.com:82/2015/1117/16/7.jpg%21960.jpg &quot;高圆圆&quot;)
</code></pre></li>
</ul>
<ul>
<li>显示效果</li>
</ul>
<p>高圆圆：<br><img src="http://pic2016.5442.com:82/2015/1117/16/7.jpg%21960.jpg" alt="高圆圆" title="高圆圆"></p>
<h2 id="8-内容目录"><a href="#8-内容目录" class="headerlink" title="8. 内容目录"></a>8. 内容目录</h2><ul>
<li>markdownpad居然不支持该语法，我就呵呵了.<blockquote>
<p>代码：</p>
</blockquote>
</li>
</ul>
<pre><code>[TOC]0.目录   
[TOC]1. 斜体和粗体          
[TOC]2. 分级标题
[TOC]3. 超链接
[TOC]     行内式
[TOC]     参考式
[TOC]    自动链接
[TOC]4. 锚点
</code></pre><h2 id="9-注脚"><a href="#9-注脚" class="headerlink" title="9. 注脚"></a>9. 注脚</h2><blockquote>
<p>代码：</p>
</blockquote>
<pre><code>使用 Markdown[1]可以效率的书写文档,你可以使用 Leanote[Le] 编辑器进行书写。

[1]:Markdown是一种纯文本标记语言

[Le]:开源笔记平台，支持Markdown和笔记直接发为博文
</code></pre><blockquote>
<p>显示效果：</p>
</blockquote>
<p>使用 Markdown<a href="Markdown是一种纯文本标记语言">1</a>可以效率的书写文档,你可以使用 Leanote<a href="开源笔记平台，支持Markdown和笔记直接发为博文">Le</a> 编辑器进行书写。       </p>
<p><br></p>
<p><br></p>
<p>   <strong>原文链接：<a href="http://blog.leanote.com/post/freewalk/Markdown-语法手册" target="_blank" rel="external">http://blog.leanote.com/post/freewalk/Markdown-语法手册</a></strong></p>
]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo常用命令]]></title>
      <url>http://yoursite.com/2017/03/11/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong><em>Hexo部署步骤</em></strong></p>
<pre><code>npm install    
npm install hexo-deployer-git --save   
hexo new &quot;新页面&quot;    
hexo clean   
hexo generate
hexo deploy    
</code></pre><a id="more"></a>
<p> <br></p>
<p><strong><em>Hexo常用命令</em></strong></p>
<pre><code>hexo new &quot;postName&quot;                 #新建文章     
hexo new page &quot;pageName&quot;             #新建页面   
hexo generate                         #生成静态页面至public目录    
hexo server                            #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）    
hexo deploy                         #将.deploy目录部署到GitHub       
hexo help                             #查看帮助
hexo version                        #查看Hexo的版本
</code></pre><p><br></p>
<p><strong><em>复合命令</em></strong></p>
<pre><code>hexo deploy -g #生成加部署   
hexo server -g #生成加预览    
</code></pre><p>命令的简写为：</p>
<pre><code>hexo n == hexo new    
hexo g == hexo generate   
hexo s == hexo server   
hexo d == hexo deploy   
</code></pre>]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[五分钟商学院--大纲]]></title>
      <url>http://yoursite.com/2016/09/25/%E4%BA%94%E5%88%86%E9%92%9F%E5%95%86%E5%AD%A6%E9%99%A2--%E5%A4%A7%E7%BA%B2/</url>
      <content type="html"><![CDATA[<p>商业四大体系合体。</p>
<p>1）商业，你与企业外部的关系；<br>2）管理，你与企业内部的关系；<br>3）个人，你与自己的关系；<br>4）以及提升前三者的：工具。    </p>
<a id="more"></a>
<h2 id="商业篇"><a href="#商业篇" class="headerlink" title="商业篇"></a>商业篇</h2><h3 id="消费心理学"><a href="#消费心理学" class="headerlink" title="消费心理学"></a>消费心理学</h3><p>1.心理账户<br>2.沉没成本<br>3.比例偏见<br>4.损失规避<br>5.价格锚点          </p>
<h3 id="商业世界五大基础逻辑"><a href="#商业世界五大基础逻辑" class="headerlink" title="商业世界五大基础逻辑"></a>商业世界五大基础逻辑</h3><p>6.流量之河<br>7.倍率之刀<br>8.价量之秤<br>9.风险之眼<br>10.规则之缝  </p>
<h3 id="互联网世界五大基本定律"><a href="#互联网世界五大基本定律" class="headerlink" title="互联网世界五大基本定律"></a>互联网世界五大基本定律</h3><p>11.信息对称<br>12.平台经济<br>13.边际成本<br>14.长尾理论<br>15.免费理论  </p>
<h3 id="行为经济学"><a href="#行为经济学" class="headerlink" title="行为经济学"></a>行为经济学</h3><p>16.结果偏见<br>17.适应性偏见<br>18.鸡蛋理论<br>19.概率偏见<br>20.凡勃伦效应</p>
<h3 id="微观经济学"><a href="#微观经济学" class="headerlink" title="微观经济学"></a>微观经济学</h3><p>21.供需理论<br>22.边际效用<br>23.机会成本<br>24.代理两难<br>25.科斯定理   </p>
<h3 id="宏观经济学"><a href="#宏观经济学" class="headerlink" title="宏观经济学"></a>宏观经济学</h3><p>26.节约悖论<br>27.张维迎林毅夫之争<br>28.人口抚养比<br>29.经济泡沫<br>30.福利经济  </p>
<h3 id="金融法律"><a href="#金融法律" class="headerlink" title="金融法律"></a>金融法律</h3><p>31.风险投资<br>32.公司的形态：有限责任，合伙企业，个人独资<br>33.期权（员工激励方案）<br>34.庞氏骗局<br>35.互联网金融   </p>
<h3 id="市场营销-Product"><a href="#市场营销-Product" class="headerlink" title="市场营销 Product"></a>市场营销 Product</h3><p>36.产品定位<br>37.自我认知<br>38.极致单品<br>39.三驾马车<br>40.最小可用品  </p>
<h3 id="市场营销-Price"><a href="#市场营销-Price" class="headerlink" title="市场营销 Price"></a>市场营销 Price</h3><p>41.渗透定价法<br>42.组合定价法<br>43.撇脂定价法<br>44.价格歧视<br>45.客户自定价   </p>
<h3 id="市场营销-Promotion"><a href="#市场营销-Promotion" class="headerlink" title="市场营销 Promotion"></a>市场营销 Promotion</h3><p>46.定位营销<br>47.饥饿营销<br>48.死亡之井<br>49.危机公关<br>50.独特的销售主张-USP   </p>
<h3 id="市场营销-Place"><a href="#市场营销-Place" class="headerlink" title="市场营销 Place"></a>市场营销 Place</h3><p>51.深度分销<br>52.直接销售<br>53.虚实结合<br>54.社区商务<br>55.反向定制  </p>
<h3 id="市场营销-互联网营销"><a href="#市场营销-互联网营销" class="headerlink" title="市场营销 互联网营销"></a>市场营销 互联网营销</h3><p>56.社群经济<br>57.口碑经济（POE理论）<br>58.粉丝经济<br>59.引爆点<br>60.红利理论  </p>
<h3 id="所有现象背后都有商业逻辑"><a href="#所有现象背后都有商业逻辑" class="headerlink" title="所有现象背后都有商业逻辑"></a>所有现象背后都有商业逻辑</h3><p>61.运动对赌<br>62.雇佣客户<br>63.服务行业美女越多，经济越不景气<br>64.狩猎式 vs 农耕式<br>65.稳定平衡态 vs 不稳定平衡态   </p>
<h2 id="管理篇"><a href="#管理篇" class="headerlink" title="管理篇"></a>管理篇</h2><h3 id="管理选人"><a href="#管理选人" class="headerlink" title="管理选人"></a>管理选人</h3><p>66.上下车法则<br>67.奥格尔维定律<br>68.首因效应/光环效应<br>69.特雷默定律<br>70.重视面试被拒的人   </p>
<h3 id="管理育人"><a href="#管理育人" class="headerlink" title="管理育人"></a>管理育人</h3><p>71.蘑菇定律<br>72.师傅制<br>73.情境领导II<br>74.鲶鱼效应<br>75.贝尼斯定理  </p>
<h3 id="管理用人"><a href="#管理用人" class="headerlink" title="管理用人"></a>管理用人</h3><p>76.不值得定律<br>77.懒蚂蚁效应<br>78.热炉法则<br>79.拜伦法则<br>80.波特定律  </p>
<h3 id="管理留人"><a href="#管理留人" class="headerlink" title="管理留人"></a>管理留人</h3><p>81.酒与污水定律<br>82.格雷欣法则（劣币驱逐良币）<br>83.雷尼尔效应<br>84.南风法则<br>85.离职面试  </p>
<h3 id="管理就是激励需求理论"><a href="#管理就是激励需求理论" class="headerlink" title="管理就是激励需求理论"></a>管理就是激励需求理论</h3><p>86.马斯洛人类需求五层次理论-生理<br>87.马斯洛人类需求五层次理论-安全<br>88.马斯洛人类需求五层次理论-归属<br>89.马斯洛人类需求五层次理论-尊重<br>90.马斯洛人类需求五层次理论-实现  </p>
<h3 id="管理就是激励其他理论"><a href="#管理就是激励其他理论" class="headerlink" title="管理就是激励其他理论"></a>管理就是激励其他理论</h3><p>91.卡诺满意度模型<br>92.赫兹伯格的双因素激励理论<br>93.亚佛斯德原则（期望理论）<br>94.马蝇效应<br>95.波什定律   </p>
<h3 id="从员工到经理"><a href="#从员工到经理" class="headerlink" title="从员工到经理"></a>从员工到经理</h3><p>96.古狄逊定理<br>97.吉格勒定理<br>98.刺猬法则<br>99.目标置换效应<br>100.篮球架子原理  </p>
<h3 id="管理1"><a href="#管理1" class="headerlink" title="管理1"></a>管理1</h3><p>101.崔西定律<br>102.蓝柏格定理<br>103.阿什定律<br>104.彼得斯定律<br>105.超限效应   </p>
<h3 id="管理2"><a href="#管理2" class="headerlink" title="管理2"></a>管理2</h3><p>106.奥卡姆剃刀定律<br>107.法约尔原则（责权利心法）<br>108.例外原则<br>109.洛克忠告<br>110.海恩法则   </p>
<h3 id="管理3"><a href="#管理3" class="headerlink" title="管理3"></a>管理3</h3><p>111.波特法则<br>112.卡贝定律<br>113.飞轮效应<br>114.墨菲定律<br>115.克里夫兰法则   </p>
<h3 id="团队合作"><a href="#团队合作" class="headerlink" title="团队合作"></a>团队合作</h3><p>116.球队，交响乐队，军队<br>117.木桶定律<br>118.多样性（异性效应）<br>119.苛希纳定律<br>120.蚁群效应  </p>
<h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p>121.作战指挥室<br>122.关键路径<br>123.范围、时间、资源的金三角<br>124.风险管理（已知的未知风险）<br>125.权利来源：专业   </p>
<h3 id="管理常见病"><a href="#管理常见病" class="headerlink" title="管理常见病"></a>管理常见病</h3><p>126.破窗效应<br>127.旁观者效应<br>128.帕金森定律<br>129.彼得原理<br>130.手表定律  </p>
<h2 id="个人篇"><a href="#个人篇" class="headerlink" title="个人篇"></a>个人篇</h2><h3 id="高效能人士的七种习惯"><a href="#高效能人士的七种习惯" class="headerlink" title="高效能人士的七种习惯"></a>高效能人士的七种习惯</h3><p>131.范式转变<br>132.情感账户<br>133.积极主动<br>134.以终为始<br>135.要事第一  </p>
<h3 id="高效能人士的七种习惯-1"><a href="#高效能人士的七种习惯-1" class="headerlink" title="高效能人士的七种习惯"></a>高效能人士的七种习惯</h3><p>136.双赢思维<br>137.知彼解己<br>138.统合综效<br>139.不断更新<br>140.找到心声  </p>
<h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><p>141.时间成本<br>142.GTD<br>143.猴子理论<br>144.三八理论<br>145.番茄钟   </p>
<h3 id="职业素养"><a href="#职业素养" class="headerlink" title="职业素养"></a>职业素养</h3><p>146.如何打招呼<br>147.如何吃西餐<br>148.如何和老板一起坐车<br>149.如何搭配衣服<br>150.邮件礼仪   </p>
<h3 id="学习能力"><a href="#学习能力" class="headerlink" title="学习能力"></a>学习能力</h3><p>151.幸存者偏见<br>152.库博经验学习圈<br>153.知识、技能、态度<br>154.学习小组（私人董事会）<br>155.如何最快速的学习    </p>
<h3 id="思考能力"><a href="#思考能力" class="headerlink" title="思考能力"></a>思考能力</h3><p>156.六顶思考帽<br>157.批判性思维/辩证思维<br>158.系统思维-关联的、整体的、动态的<br>159.正向思维<br>160.逆向思维   </p>
<h3 id="逻辑思维"><a href="#逻辑思维" class="headerlink" title="逻辑思维"></a>逻辑思维</h3><p>161.偷换概念-同一律<br>162.自相矛盾-矛盾律<br>163.模棱两可-排中律<br>164.三段论<br>165.归纳法与黑天鹅事件   </p>
<h3 id="谈判能力"><a href="#谈判能力" class="headerlink" title="谈判能力"></a>谈判能力</h3><p>166.吉普赛陷阱<br>167.定位调整偏见<br>168.有限的权利 &amp; 不露面的人<br>169.战略延迟 &amp; 最终期限<br>170.吃惊 &amp; 撤退    </p>
<h3 id="情感能力"><a href="#情感能力" class="headerlink" title="情感能力"></a>情感能力</h3><p>171.元能力：同理心<br>172.元能力：自我认知（卢维斯定理）<br>173.元能力：自我控制<br>174.元能力：自我激励<br>175.元能力：人际关系处理   </p>
<h3 id="演讲能力"><a href="#演讲能力" class="headerlink" title="演讲能力"></a>演讲能力</h3><p>176.导游心法<br>177.注意力法则<br>178.空中加油<br>179.案例和幽默感<br>180.打透     </p>
<h3 id="沟通能力"><a href="#沟通能力" class="headerlink" title="沟通能力"></a>沟通能力</h3><p>181.快乐痛苦四原则<br>182.亨利法则<br>183.踢猫效应<br>184.电梯测验<br>185.如何问出好问题    </p>
<h3 id="创新能力"><a href="#创新能力" class="headerlink" title="创新能力"></a>创新能力</h3><p>186.创新者的窘境<br>187.人无我有，人有我优，人优我廉……<br>188.达维多定律<br>189.路径依赖<br>190.比伦定律   </p>
<h3 id="领导能力"><a href="#领导能力" class="headerlink" title="领导能力"></a>领导能力</h3><p>191.远（后喻文明）<br>192.小（科斯定理）<br>193.变（企业生命周期）<br>194.快（快鱼吃慢鱼）<br>195.专（网状激活系统）   </p>
<h2 id="战略篇"><a href="#战略篇" class="headerlink" title="战略篇"></a>战略篇</h2><h3 id="战略工具"><a href="#战略工具" class="headerlink" title="战略工具"></a>战略工具</h3><p>196.麦肯锡·MECE法<br>197.波特·五力模型<br>198.波士顿矩阵<br>199.金字塔原理<br>200.通用电器矩阵    </p>
<h3 id="战略工具-1"><a href="#战略工具-1" class="headerlink" title="战略工具"></a>战略工具</h3><p>201.正态分布理论<br>202.逻辑树/决策树<br>203.平衡计分表<br>204.SWOT模型<br>205.麦肯锡·七步成诗法    </p>
<h3 id="博弈工具"><a href="#博弈工具" class="headerlink" title="博弈工具"></a>博弈工具</h3><p>206.纳什均衡<br>207.囚徒困境<br>208.贝叶斯均衡<br>209.智猪博弈<br>210.公地悲剧     </p>
<h3 id="博弈工具-1"><a href="#博弈工具-1" class="headerlink" title="博弈工具"></a>博弈工具</h3><p>211.你分我拿<br>212.拍卖逻辑<br>213.零和游戏原理<br>214.拍卖美元<br>215.用餐者困境    </p>
<h3 id="决策工具"><a href="#决策工具" class="headerlink" title="决策工具"></a>决策工具</h3><p>216.儒佛尔定律<br>217.吉德林法则<br>218.布利丹效应<br>219.羊群效应<br>220.麦穗哲理     </p>
<h3 id="创新工具"><a href="#创新工具" class="headerlink" title="创新工具"></a>创新工具</h3><p>221.减法创新<br>222.除法创新<br>223.乘法创新<br>224.任务统筹策略<br>225.属性依存策略   </p>
<h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><p>226.OKR<br>227.MBTI人格理论（自我管理）<br>228.SMART原则（目标管理）<br>229.PDCA循环规则（项目管理）<br>230.5W2H法（目标管理）    </p>
<h3 id="思考工具"><a href="#思考工具" class="headerlink" title="思考工具"></a>思考工具</h3><p>231.头脑风暴法<br>232.思考工具：白板<br>233.思维导图<br>234.5WHY分析法<br>235.复盘     </p>
<h3 id="沟通工具"><a href="#沟通工具" class="headerlink" title="沟通工具"></a>沟通工具</h3><p>236.有效的1：1<br>237.罗伯特议事规则<br>238.白板墙、低隔板、下午茶和即时贴<br>239.拉波波特评论规则<br>240.结构沟通法     </p>
<h3 id="财务工具"><a href="#财务工具" class="headerlink" title="财务工具"></a>财务工具</h3><p>241.财务分析中的五力分析法<br>242.零基预算？<br>243.本福特定律<br>244.独立P&amp;L<br>245.计算企业价值     </p>
<h3 id="营销工具"><a href="#营销工具" class="headerlink" title="营销工具"></a>营销工具</h3><p>246.直播营销<br>247.Focus Group<br>248.STP<br>249.4C<br>250.4P   </p>
<h3 id="未来已来"><a href="#未来已来" class="headerlink" title="未来已来"></a>未来已来</h3><p>256.零边际成本社会<br>257.奇点临近<br>258.比特币<br>259.基因科技<br>260.人工智能   </p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 五分钟商学院 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[精英日课--精英的见识和我们的时代]]></title>
      <url>http://yoursite.com/2016/08/09/%E7%B2%BE%E8%8B%B1%E6%97%A5%E8%AF%BE--%E7%B2%BE%E8%8B%B1%E7%9A%84%E8%A7%81%E8%AF%86%E5%92%8C%E6%88%91%E4%BB%AC%E7%9A%84%E6%97%B6%E4%BB%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>1</p>
</blockquote>
<p>马斯洛的理论说，人的需求像个金字塔，是有不同层次的。底层是生理和安全，往上是爱、尊重和自我实现。满足了底层，就会有高层的需求，就好像罗胖说的“等钱多到没意义了，别的意义就出来了”。</p>
<a id="more"></a>
<p>马斯洛的理论一直有争议，但是你得承认，它很好的描述了人与人之间的差距。有的人认为最微小的物质比什么都重要，有的人却在追求自我实现。他们之前的差别，当然不仅仅是钱多钱少，更重要的显然是认知上。</p>
<p>这个认知不是智商。人的智商和身高一样，是正态分布，再高也高不到哪去；可是人的成就却是幂律分布的–是一系列苦练和正反馈积累的结果–差距如同云泥。</p>
<p>成就到了一定程度，你就算吧她所有的资源都拿走，他想必还是像能穿越小说里的主人公干一番大事，因为他已经积累了大量的智识。</p>
<p>智慧和见识。大人物应该有什么样的见识呢？</p>
<p><br></p>
<blockquote>
<p>2</p>
</blockquote>
<p>美苏冷战期间，双方曾经有过一些表示友好的举动，比如在对方国家办展览。1959年苏联搞了一个美国展，其中展示了美式的大房子，里面各种家用电器。苏联宣传说这种生活是一般美国人享受不到的 ，但其实那就是美国普通中产阶级生活水准没错，电冰箱早在1920年就已经在美国家庭普及了。</p>
<p>当时尼克松作为美国副总统访问苏联，跟赫鲁晓夫一起参观了这个美国展。二人走进美式样板房，尼克松看里面有个洗衣机，他找到了一个话题灵感。</p>
<p>尼克松说，咱们两国为什么非得高火箭竞争呢，咱们制造洗衣机不是更好吗？</p>
<p>可是赫鲁晓夫有完全不同的思路。赫鲁晓夫说，你们美国人不要以为苏联人没见过洗衣机，其实我们苏联每个新房都有洗衣机–而且我们的洗衣机都是一样的，不像你们资本主义搞各种不同型号的洗衣机，这不纯属浪费吗？</p>
<p>这就是史上著名的“厨房辩论”，尼克松因为这个辩论拿到了很多高分形象。现在我们可以判定，赫鲁晓夫在这场辩论中完败。中间有个小花絮是尼克松说美国将会让每个家庭都拥有一辆汽车，赫鲁晓夫可能太过急于找回场子，竟说那苏联就能让每个家庭都拥有一架飞机！尼克松马上反应，你想把飞机停在哪？</p>
<p>1959年的时间，各国正在从传统向现代化演变。赫鲁晓夫在别的方面可能才智过人，在一个更传统场合肯定游刃有余–但是面对“现代界”，竟然没有一个最基本的见识。</p>
<p>这是因为现代化的见识不是常说</p>
<p><br></p>
<blockquote>
<p>3</p>
</blockquote>
<p>就算生活在发达国家，也不是所有人都有现代化思维。</p>
<p>美国社会科学家Herbert Gant曾经有个研究，比较了波士顿工薪阶层和精英阶层的文化差异。他发现工薪阶层的一个特点是只相信自己的亲友，二非常不信任外部世界，甚至可能对陌生人有一种自发的敌意。他把这些人成为“都市村民”住在都市里，却仍然都是村名思维。</p>
<p>对比之下，中产精英阶层的人没有那么强烈的亲缘意识，他们很容易跟陌生人合作，而且非常信任办事规则。</p>
<p>对比今日的中国这个现象不是很明显吗？小城镇里人们特别讲亲属和熟人关系，没有关系寸步难行，这也是为什么有理想的年轻人非得去大城市！什么叫发达？什么叫精英？真正的差距是思维模式。</p>
<p>像这样的差异我们还可以列举很多–请允许我用“精英”和“普通人”来标记这两种思维。</p>
<ul>
<li>精英能够理解复杂的抽象概念，而普通人处处使用简单形象逻辑</li>
<li>精英探索未知，而普通人恐惧未知</li>
<li>精英从长远打算，而普通人缺乏自控</li>
<li>精英注重个人选择和自由–尼克松真是用这一点说明美国需要不同型号的洗衣机，而普通人认为别人应该更自己一样。</li>
<li>精英拥抱改变，而普通人拒绝改变</li>
<li>精英跟各个阶层的人都有交往，而普通人只跟本阶层的人交往</li>
<li>精英爱谈论想法，而普通人爱谈论人和东西</li>
<li>精英吧自由时间花在学习上，而普通人把自由时间花在娱乐上…..</li>
</ul>
<p>等等等等。还有一个区别值得特别提一下，那就是精英注重效率，而普通人注重公平。</p>
<p>现在世界的一个趋势是贫富差距越来越大，而精英对此根本不在于。这是为什么“精英”，所谓“1%”，在美国已经几乎是个贬义词。</p>
<p>问题在于，如果精英比普通人仅仅强在他是个富二代或者官二代，我们完全有权鄙视他们–可如果精英的成功是基于努力程度和见识水平，那我们的道德优越感还有多大的意义呢？</p>
<p><br></p>
<blockquote>
<p>4</p>
</blockquote>
<p>好在中国，“精英”目前可能还是个好词。</p>
<p>中国不但跟美国搞洗衣机竞争，而且正在取胜。但美国中产阶级日渐萎缩的这个时代，中国中产阶级正在高速崛起。有人说非得有房有车或者年薪百万才叫中产阶级，在我看来纯属夸张。只要马斯洛金字塔的顶层攀登，自我实现的需求，就是中产。</p>
<p>我们从来没给冰箱加过锁，经常网上分享家里的宠物猫的照片，无论在工作还是消费上都有多种选择，而且正在追求更大的作为。</p>
<p>所以我们想向精英学习。既然现代世界跟我们的直觉，跟心灵鸡汤，跟寓言故事和成语故事都非常不同，我们就想用精英的眼光和思维方式去理解、玩转、和改变这个世界。</p>
<p>最好的办法就是亲身参与，而最快的办法则是读书。</p>
<p>互联网也不知是幸运还是不幸，我们正好赶上了互联网时代。</p>
<p><br></p>
<blockquote>
<p>5</p>
</blockquote>
<p>在这个本来最需要读书的时代，因为有了互联网，人们不爱读书了。</p>
<p>所谓“互联网上知识丰富”，其实是个假象，大多数人在网上接触到的内容极其有限。如果有关现代化的见识是一片汪洋大海，我们每天在新闻、论坛、微博和朋友圈看到的东西，大约相当于海滩上几个漂亮的贝壳。</p>
<p>最新奇的东西在哪里？最刺激的东西在哪里？最野性的东西在哪里？它们和最有用，最深刻，最高妙的东西在一起，在书里，在小众刊物里，在论文里。想要得到这些东西，你得下海。</p>
<p>这些更好的东西没有流行，一是因为下海需要大量的智识积累和时间成本，二是因为它们的生产者不知道怎么跟读者说话。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 精英日课 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
